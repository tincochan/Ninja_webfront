"use strict";

// Mocha
mocha.setup("bdd");

// Chai
const assert = chai.assert;
const expect = chai.expect;
const should = chai.should();

// Vue Test Utils
const mount = vueTestUtils.mount;
const shallow = vueTestUtils.shallow;

// Vue Grid Example
// register the grid component
const DemoGrid = {
  template: `
  <table>
    <thead>
      <tr>
        <th v-for="key in columns" @click="sortBy(key)" :class="{ active: sortKey == key }">
          {{ key | capitalize }}
          <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
          </span>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="entry in filteredData">
        <td v-for="key in columns">
          {{entry[key]}}
        </td>
      </tr>
    </tbody>
  </table>
`,
  props: {
    data: Array,
    columns: Array,
    filterKey: String
  },
  data: function() {
    var sortOrders = {};
    this.columns.forEach(function(key) {
      sortOrders[key] = 1;
    });
    return {
      sortKey: "",
      sortOrders: sortOrders
    };
  },
  computed: {
    filteredData: function() {
      var sortKey = this.sortKey;
      var filterKey = this.filterKey && this.filterKey.toLowerCase();
      var order = this.sortOrders[sortKey] || 1;
      var data = this.data;
      if (filterKey) {
        data = data.filter(function(row) {
          return Object.keys(row).some(function(key) {
            return (
              String(row[key])
                .toLowerCase()
                .indexOf(filterKey) > -1
            );
          });
        });
      }
      if (sortKey) {
        data = data.slice().sort(function(a, b) {
          a = a[sortKey];
          b = b[sortKey];
          return (a === b ? 0 : a > b ? 1 : -1) * order;
        });
      }
      return data;
    }
  },
  filters: {
    capitalize: function(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
  },
  methods: {
    sortBy: function(key) {
      this.sortKey = key;
      this.sortOrders[key] = this.sortOrders[key] * -1;
    }
  }
};
Vue.component("demo-grid", DemoGrid);

const demo = new Vue({
  el: "#demo",
  data: {
    searchQuery: "",
    gridColumns: ["name", "power"],
    gridData: [
      { name: "Chuck Norris", power: Infinity },
      { name: "Bruce Lee", power: 9000 },
      { name: "Jackie Chan", power: 7000 },
      { name: "Jet Li", power: 8000 }
    ]
  }
});

// Tests
describe("Chai Setup", () => {
  it("Chai Version: 2.3.0", () => {
    chai.version.should.equal("2.3.0");
  });
  it("chai.should()", () => {
    true.should.equal(true);
  });
  it("chai.expect", () => {
    expect(true).to.equal(true);
  });
  it("chai.assert", () => {
    assert.equal(true, true);
  });
});

describe("Vue Test Utils", () => {
  it("Vue.js Version: 2.5.13", () => {
    Vue.version.should.equal("2.5.13");
  });
  it("mount()", () => {
    (typeof mount).should.equal("function");
  });
  it("shallow()", () => {
    (typeof shallow).should.equal("function");
  });
});

describe("Vue Demo Grid", () => {
  let wrapper = null;
  beforeEach(function() {
    const propsData = {
      data: [
        { name: "Chuck Norris", power: Infinity },
        { name: "Bruce Lee", power: 9000 },
        { name: "Jackie Chan", power: 7000 },
        { name: "Jet Li", power: 8000 }
      ],
      columns: ["name", "power"],
      filterKey: ""
    };
    wrapper = shallow(DemoGrid, {
      propsData
    });
  });
  it("is vue component", () => {
    wrapper.isVueInstance().should.equal(true);
  });
  it("renders table node", () => {
    wrapper
      .find("table")
      .is("table")
      .should.equal(true);
  });
});

// Runner
mocha.checkLeaks();
mocha.run();
